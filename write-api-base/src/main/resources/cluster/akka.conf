include classpath("/commonn/akka.conf")

akka {
  actor {
    provider = cluster
  }

  cluster {
    use-dispatcher = "cluster-dispatcher"

    seed-nodes = []

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    split-brain-resolver {
      active-strategy = keep-oldest
    }

    shutdown-after-unsuccessful-join-seed-nodes = 30s

    sharding {
      # NOTE 通常は ノード数 * 10 のシャード数に設定する
      number-of-shards = 30
    }
  }

  remote {
    log-remote-lifecycle-events = on
    artery {
      enabled = on
      transport = tcp
      canonical {
        hostname = "<getHostAddress>"
        hostname = ${?AKKA_REMOTE_ARTERY_CANONICAL_HOSTNAME}
        port = 25520
        port = ${?AKKA_REMOTE_ARTERY_CANONICAL_PORT}
      }
      advanced {
        # TODO デフォルトが 256KiB で、メッセージのペイロードが大きいと akka.remote.OversizedPayloadException: Discarding oversized payload sent to XXXXXX: max allowed size 262144 bytes. Message type XXXX が発生する
        # ここではとりあえずサイズを大きくしているが、実際の開発ではそのような大きなペイロードにならないように設計するべき
        maximum-frame-size = 50 MiB
      }
    }
  }

  discovery {
    method = aws-api-ecs-async
    aws-api-ecs-async {
      # Defaults to "default" to match the AWS default cluster name if not overridden
      cluster = ${AKKA_DISCOVERY_AWS_API_ECS_CLUSTER}
    }
  }

  management {
    http {
      hostname = ""
      port = 8558
      bind-hostname = 0.0.0.0
      bind-port = 8558
    }
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = aws-api-ecs-async
        service-name = ${AKKA_DISCOVERY_AWS_API_ECS_SERVICE}
      }
      new-cluster-enabled = on
      new-cluster-enabled = ${?AKKA_NEW_CLUSTER_ENABLED}
    }
    contract-point {
      fallback-port = 8558
    }
    cluster.health-check {
      ready-states = ["Up"]
    }
  }
}

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  throughput = 1
  fork-join-executor {
    parallelism-min = 4
    parallelism-max = 16
    parallelism-factor = 2.0
  }
}
