# https://github.com/chatwork/charts/tree/master/akka
image:
  repository: '{{ .Values.writeApi.writeApiServer.frontend.image.repository }}'
  tags: '{{ env "WRITE_API_SERVER_IMAGE_TAG" | default .Values.writeApi.writeApiServer.frontend.image.tag}}'
  pullPolicy: '{{ .Values.writeApi.writeApiServer.frontend.image.pullPolicy}}'

{{- if .Values.ecrCred.enabled }}
imagePullSecrets:
  - name: ecr-cred-regcred
{{- end }}

akka:
  cluster:
    enabled: true
  discovery:
    enabled: true
  remote:
    enabled: true
  management:
    enabled: true
    port: 8558
    nodePort: 30132
    service:
      enabled: true
      type: NodePort
    healthChecks:
      livenessPath: health/alive
      readinessPath: health/ready

  http:
    enabled: true
    port: 8081
    portName: http
    service:
      enabled: true
      annotations: {}
      labels: {}
      type: NodePort
      ports:
        - targetPort: http
          name: http
          port: 8081
          nodePort: 30031
          protocol: TCP
    # Ingress for akka-http.
    {{- if .Values.writeApi.writeApiServer.frontend.ingress.enabled }}
    ingresses: []
      # - annotations: {}
      #   labels: {}
      #   name: "your-ingress-name"
      #   tls: []
      #     - hosts: []
      #       secretName: ""
      #   hosts: []
      #     - host:
    #       paths: []
    #   targetPort: 8080
    {{- end }}




affinity: {}

command:
  {{- toYaml .Values.writeApi.writeApiServer.frontend.command | nindent 2 }}

env:
  {{- with .Values.writeApi.writeApiServer.frontend.env }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
  {{- with .Values.writeApi.env }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
  - name: CONFIG_FORCE_kamon_environment_tags_version
    value: '{{ env "WRITE_API_SERVER_IMAGE_TAG" | default .Values.writeApi.writeApiServer.frontend.image.tag}}'
  - name: CONFIG_FORCE_akka_remote_artery_canonical_hostname
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: CONFIG_FORCE_akka_management_http_hostname
    valueFrom:
      fieldRef:
        fieldPath: status.podIP

lifecycle:
  preStop:
    exec:
      command: [ "sh", "-c", "sleep {{ .Values.writeApi.writeApiServer.frontend.processTimeoutInSec}}" ]

livenessProbe:
  enabled: false
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

podAnnotations: {}

podLabels:
  adceet/akka-cluster-name: '{{ .Values.writeApi.akkaClusterName }}'

startupProbe:
  enabled: false

readinessProbe:
  enabled: false
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

replicaCount: {{ .Values.writeApi.writeApiServer.frontend.replicaCount }}

resources:
  {{- toYaml .Values.writeApi.writeApiServer.frontend.resources | nindent 2 }}

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 10%
    maxUnavailable: 0%

terminationGracePeriodSeconds:  {{ add .Values.writeApi.writeApiServer.frontend.processTimeoutInSec 5 }}

rbac:
  create: true

serviceAccount:
  create: {{ .Values.writeApi.writeApiServer.frontend.serviceAccount.create }}
  {{- if .Values.writeApi.writeApiServer.frontend.serviceAccount.name }}
  name: {{ .Values.writeApi.writeApiServer.frontend.serviceAccount.name }}
  {{- end }}

podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

autoscaling:
  {{- toYaml .Values.writeApi.writeApiServer.frontend.autoscaling | nindent 2 }}

metrics:
  enabled: false
  port: 9095
  path: "/"

configmaps:
  chart.conf: ""
  akka.conf: ""
  kamon.conf: ""

useResourceApplicationConf: false
